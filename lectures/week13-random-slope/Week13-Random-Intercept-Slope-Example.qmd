---
title: "Longitudinal Data Analysis with Mixed-Effects Models in R- Part 2"
author: 
  - name: Davood Tofighi, Ph.D.
    email: dtofighi@unm.edu
    orcid: 0000-0001-8523-7776
    affiliations: Department of Mathematics and Statistics, University of New Mexico
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
format:
  html:
    toc: false
    toc-depth: 2
    toc-expand: false
    toc-float:
      collapsed: true
    number-sections: false
    theme: readable
    highlight-style: tango # pygments, zenburn, tango, kate, monochrome, espresso, zenburn, haddock, breezedark, breezelight
    fig-width: 7
    fig-height: 5
    output-dir: "Handouts"
  revealjs: 
    # include-in-header: preamble.html
    incremental: false
    smaller: false
    scrollable: true
    background-transition: fade
    progress: true
    history: true
    hash-type: number    
    slide-number: c/t
    show-slide-number: all  
    menu:
      side: right
      width: normal
      numbers: true
    chalkboard:
      theme: chalkboard
    css: style.css
  clean-revealjs:
    self-contained: true
    incremental: false
    slide-number: c/t
    smaller: false
    scrollable: true
  pdf:
    documentclass: scrartcl
    institute: University of New Mexico
    mainfont: Georgia
    fontsize: 10.5pt
    linestretch: 1.2
    number-sections: true
    latex-output-dir: "Handouts"
    pagestyle: plain
    highlight-style: tango # pygments, zenburn, tango, kate, monochrome, espresso, zenburn, haddock, breezedark, breezelight
    code-block-bg: "#f8f8f8"   # hexcolor: #f8f8f8 (light gray), #f0f0f0 (lighter gray), #e8e8e8 (lightest gray), #f8f8ff (light blue), #dfdfef (blue)
    fig-width: 7
    fig-height: 5
    # include-in-header: preamble.tex
    keep-tex: true
    toc: true
    toc-depth: 2
  typst:
    papersize: us-letter
    mainfont: "Latin Modern Roman"
    fontsize: 10.5pt
    fig-width: 7
    fig-height: 5
    margin:
      left: 1in
      right: 1in
    toc: false
    citeproc: true
    csl: https://www.zotero.org/styles/apa
execute:
  echo: true
  warning: false
  error: false 
monofont: 'Fira Code'
df-print: kable
# fig-cap-location: bottom
# tbl-cap-location: top
# citation: false
bibliography: references.bib
csl: apa.csl
nocite: |
  @demidenko2013,@harville1997,@searle2006,@magnus2019,@petersen2012matrix,@myers2010, hartig2024, @bates205,@pinheiro2000
---



# Chapter 8, Section 8.8

## Six Cities Study of Air Pollution and Health

### Linear Mixed Effects Model (Random Intercept and Slope for Age)

In this section, we analyze the Six Cities Study data to understand the relationship between lung function (`fev1`) and various predictors, including age and height. We employ linear mixed-effects models to account for the repeated measures within individuals.

### Step 1: Load Required Libraries

First, we load the necessary libraries. The `foreign` package is used to read `.dta` files, the `nlme` and `lme4` packages are utilized for fitting linear mixed-effects models, and the `DHARMa` package is used for residual diagnostics.

```{r}
#| label: load-libraries
# Install and load necessary packages if not already installed
pacman::p_load(foreign, nlme, lme4, DHARMa, dplyr, ggplot2)
```

### Step 2: Load and Prepare the Data

We load the `fev1.dta` dataset, exclude the observation with `id` 197, and create log-transformed variables for height.

```{r}
#| label: laod-data
# Load the dataset
fev1 <- read.dta("c:/fev1.dta")

# Exclude the observation with id 197
fev1 <- subset(fev1, id != 197)

# Create log-transformed variables
fev1 <- fev1 |>
  mutate(
    loght = log(ht),
    logbht = log(baseht)
  )
```

### Step 3: Fit Linear Mixed-Effects Models Using `nlme`

We fit three different linear mixed-effects models to the data, each with varying random effects structures.

#### Model 1: Random Intercept and Slope for Age

This model allows each individual to have their own baseline `logfev1` and their own rate of change with respect to age.

```{r model1-nlme, echo=TRUE}
# Fit the first model with random intercept and slope for age using nlme
model1_nlme <- lme(logfev1 ~ age + loght + baseage + logbht, 
                   random = ~ age | id, data = fev1, method = "REML")

# Display the summary of the model
summary(model1_nlme)
```

#### Model 2: Random Intercept and Slope for Log Height

In this model, we allow random intercepts and slopes for `loght` instead of `age`.

```{r model2-nlme, echo=TRUE}
# Fit the second model with random intercept and slope for loght using nlme
model2_nlme <- lme(logfev1 ~ age + loght + baseage + logbht, 
                   random = ~ loght | id, data = fev1, method = "REML")

# Display the summary of the model
summary(model2_nlme)
```

#### Model 3: Random Intercept and Slopes for Age and Log Height

This comprehensive model includes random intercepts and slopes for both `age` and `loght`, capturing more complex individual variability.

```{r model3-nlme, echo=TRUE}
# Fit the third model with random intercept and slopes for age and loght using nlme
model3_nlme <- lme(logfev1 ~ age + loght + baseage + logbht, 
                   random = ~ age + loght | id, data = fev1, method = "REML")

# Display the summary of the model
summary(model3_nlme)
```

### Step 4: Fit Linear Mixed-Effects Models Using `lme4`

For comparison, we fit the same models using the `lme4` package, which is often preferred for its flexibility and speed, especially with larger datasets.

#### Model 1: Random Intercept and Slope for Age

```{r model1-lme4, echo=TRUE}
# Fit the first model with random intercept and slope for age using lme4
model1_lme4 <- lmer(logfev1 ~ age + loght + baseage + logbht + 
                     (age | id), data = fev1, REML = TRUE)

# Display the summary of the model
summary(model1_lme4)
```

#### Model 2: Random Intercept and Slope for Log Height

```{r model2-lme4, echo=TRUE}
# Fit the second model with random intercept and slope for loght using lme4
model2_lme4 <- lmer(logfev1 ~ age + loght + baseage + logbht + 
                     (loght | id), data = fev1, REML = TRUE)

# Display the summary of the model
summary(model2_lme4)
```

#### Model 3: Random Intercept and Slopes for Age and Log Height

```{r model3-lme4, echo=TRUE}
# Fit the third model with random intercept and slopes for age and loght using lme4
model3_lme4 <- lmer(logfev1 ~ age + loght + baseage + logbht + 
                     (age + loght | id), data = fev1, REML = TRUE)

# Display the summary of the model
summary(model3_lme4)
```

### Step 5: Compare Models Using AIC and BIC

We compare the models based on Akaike Information Criterion (AIC) and Bayesian Information Criterion (BIC) to determine which model fits the data best.

```{r model-comparison, echo=TRUE}
# Extract AIC and BIC for nlme models
aic_nlme <- AIC(model1_nlme, model2_nlme, model3_nlme)
bic_nlme <- BIC(model1_nlme, model2_nlme, model3_nlme)

# Extract AIC and BIC for lme4 models
aic_lme4 <- AIC(model1_lme4, model2_lme4, model3_lme4)
bic_lme4 <- BIC(model1_lme4, model2_lme4, model3_lme4)

# Combine into a single table
model_comparison <- data.frame(
  Model = rep(c("Model1_nlme", "Model2_nlme", "Model3_nlme",
               "Model1_lme4", "Model2_lme4", "Model3_lme4"), each = 2),
  Criterion = rep(c("AIC", "BIC"), times = 6),
  Value = c(aic_nlme$AIC, bic_nlme$BIC, aic_lme4$AIC, bic_lme4$BIC)
)

# Display the comparison table
print(model_comparison)
```

### Interpretation of Model Comparisons

Based on the AIC and BIC values, **Model 2** (`~ loght | id`) has the lowest AIC and BIC among the nlme models, suggesting it provides the best fit compared to Models 1 and 3. Similarly, in the lme4 models, **Model 2** also tends to have favorable AIC and BIC values, indicating a better fit.

### Step 6: Residual Diagnostics Using `DHARMa`

Residual diagnostics are essential to validate the assumptions of our mixed-effects models. The `DHARMa` package provides tools for residual diagnostics tailored for complex models.

#### Diagnostics for Model 2 (nlme)

```{r residuals-model2-nlme, echo=TRUE, warning=FALSE, message=FALSE}
# Simulate residuals using DHARMa for nlme model2
simulation_output_nlme <- simulateResiduals(fittedModel = model2_nlme, n = 1000)

# Plot residual diagnostics
plot(simulation_output_nlme)
```

#### Diagnostics for Model 2 (lme4)

```{r residuals-model2-lme4, echo=TRUE, warning=FALSE, message=FALSE}
# Simulate residuals using DHARMa for lme4 model2
simulation_output_lme4 <- simulateResiduals(fittedModel = model2_lme4, n = 1000)

# Plot residual diagnostics
plot(simulation_output_lme4)
```

### Interpretation of Residual Diagnostics

The residual diagnostic plots generated by `DHARMa` help assess the fit of the models:

1. **Uniformity**: Residuals should be uniformly distributed if the model fits well.
2. **No Patterns**: There should be no discernible patterns in residuals vs. predicted values.
3. **No Overdispersion or Zero-Inflation**: The residuals should not show signs of overdispersion or excess zeros.

If the diagnostic plots show deviations from these expectations, it may indicate issues with the model fit, such as missing variables, incorrect random effects structure, or violations of model assumptions.

---

# MIT Growth and Development Study

### Linear Mixed Effects Model (Random Intercept and Slope)

In this section, we analyze data from the MIT Growth and Development Study to investigate the relationship between body fat percentage (`pbf`) and time.

### Step 1: Load Required Libraries

```{r mit-load-libraries, echo=TRUE}
# Install necessary packages if not already installed
if (!require(foreign)) install.packages("foreign")
if (!require(nlme)) install.packages("nlme")
if (!require(lme4)) install.packages("lme4")
if (!require(DHARMa)) install.packages("DHARMa")
if (!require(dplyr)) install.packages("dplyr")
if (!require(ggplot2)) install.packages("ggplot2")

# Load libraries
library(foreign)
library(nlme)
library(lme4)
library(DHARMa)
library(dplyr)
library(ggplot2)
```

### Step 2: Load and Prepare the Data

We load the `fat.dta` dataset and create a new variable `time0` to represent time points greater than or equal to zero.

```{r mit-load-data, echo=TRUE}
# Load the dataset
fat <- read.dta("c:/fat.dta")

# Create time0 variable
fat <- fat |>
  mutate(
    time0 = time * (time >= 0)
  )
```

### Step 3: Fit Linear Mixed-Effects Models Using `nlme`

#### Model 1: Random Intercept and Slopes for Time and Time0

```{r mit-model1-nlme, echo=TRUE}
# Fit the first model with random intercept and slopes for time and time0 using nlme
model1_nlme <- lme(pbf ~ time + time0, 
                   random = ~ time + time0 | id, data = fat, method = "REML")

# Display the summary of the model
summary(model1_nlme)
```

#### Model 2: Hybrid Model with Exponential Serial Correlation

This model introduces a continuous AR(1) correlation structure to account for serial correlation in the residuals.

```{r mit-model2-nlme, echo=TRUE}
# Fit the second model with AR(1) correlation structure using nlme
model2_nlme <- lme(pbf ~ time + time0, 
                   random = ~ 1 | id, 
                   corr = corCAR1(form = ~ time | id), data = fat, method = "REML")

# Display the summary of the model
summary(model2_nlme)
```

### Step 4: Fit Linear Mixed-Effects Models Using `lme4`

#### Model 1: Random Intercept and Slopes for Time and Time0

```{r mit-model1-lme4, echo=TRUE}
# Fit the first model with random intercept and slopes for time and time0 using lme4
model1_lme4 <- lmer(pbf ~ time + time0 + (time + time0 | id), data = fat, REML = TRUE)

# Display the summary of the model
summary(model1_lme4)
```

#### Model 2: Hybrid Model with AR(1) Serial Correlation

`lme4` does not natively support correlation structures like AR(1). However, we can use the `glmmTMB` package or similar for such structures. For simplicity, we proceed with `lme4` models without AR(1).

### Step 5: Compare Models Using AIC and BIC

```{r mit-model-comparison, echo=TRUE}
# Extract AIC and BIC for nlme models
aic_nlme_mit <- AIC(model1_nlme, model2_nlme)
bic_nlme_mit <- BIC(model1_nlme, model2_nlme)

# Extract AIC and BIC for lme4 models
aic_lme4_mit <- AIC(model1_lme4)
bic_lme4_mit <- BIC(model1_lme4)

# Combine into a single table
model_comparison_mit <- data.frame(
  Model = c("Model1_nlme", "Model2_nlme", "Model1_lme4"),
  AIC = c(aic_nlme_mit$AIC, aic_lme4_mit$AIC),
  BIC = c(bic_nlme_mit$BIC, bic_lme4_mit$BIC)
)

# Display the comparison table
print(model_comparison_mit)
```

### Interpretation of Model Comparisons

**Model 2** (`Hybrid Model with AR(1)`) in `nlme` typically shows a better fit (lower AIC and BIC) compared to **Model 1**. This suggests that accounting for serial correlation in the residuals improves the model's ability to capture the underlying data structure.

### Step 6: Residual Diagnostics Using `DHARMa`

#### Diagnostics for Model 2 (nlme)

```{r mit-residuals-model2-nlme, echo=TRUE, warning=FALSE, message=FALSE}
# Simulate residuals using DHARMa for nlme model2
simulation_output_mit_nlme <- simulateResiduals(fittedModel = model2_nlme, n = 1000)

# Plot residual diagnostics
plot(simulation_output_mit_nlme)
```

#### Diagnostics for Model 1 (lme4)

```{r mit-residuals-model1-lme4, echo=TRUE, warning=FALSE, message=FALSE}
# Simulate residuals using DHARMa for lme4 model1
simulation_output_mit_lme4 <- simulateResiduals(fittedModel = model1_lme4, n = 1000)

# Plot residual diagnostics
plot(simulation_output_mit_lme4)
```

### Interpretation of Residual Diagnostics

The residual diagnostic plots generated by `DHARMa` help assess the fit of the models:

1. **Uniformity**: Residuals should be uniformly distributed if the model fits well.
2. **No Patterns**: There should be no discernible patterns in residuals vs. predicted values.
3. **No Overdispersion or Zero-Inflation**: The residuals should not show signs of overdispersion or excess zeros.

If the diagnostic plots show deviations from these expectations, it may indicate issues with the model fit, such as missing variables, incorrect random effects structure, or violations of model assumptions.

---

# AIDS Clinical Trial Group (ACTG) 193A Study

### Linear Mixed Effects Model (Random Intercept and Slope for Age)

In this analysis, we examine the effect of treatment and time on CD4 cell counts (`logcd4`) in the ACTG 193A Study.

### Step 1: Load Required Libraries

```{r actg-load-libraries, echo=TRUE}
# Install necessary packages if not already installed
if (!require(foreign)) install.packages("foreign")
if (!require(nlme)) install.packages("nlme")
if (!require(lme4)) install.packages("lme4")
if (!require(DHARMa)) install.packages("DHARMa")
if (!require(dplyr)) install.packages("dplyr")
if (!require(ggplot2)) install.packages("ggplot2")

# Load libraries
library(foreign)
library(nlme)
library(lme4)
library(DHARMa)
library(dplyr)
library(ggplot2)
```

### Step 2: Load and Prepare the Data

We load the `cd4.dta` dataset and create treatment-related variables.

```{r actg-load-data, echo=TRUE}
# Load the dataset
cd4 <- read.dta("c:/cd4.dta")

# Create treatment variable
cd4 <- cd4 |>
  mutate(
    trt = ifelse(group == 4, 1, 0),  # Treatment group
    week16 = (week - 16) * (week >= 16),
    trt.week = trt * week,
    trt.week16 = trt * week16
  )
```

### Step 3: Fit Linear Mixed-Effects Models Using `nlme`

#### Model 1: Random Intercept and Slopes for Week and Week16

```{r actg-model1-nlme, echo=TRUE}
# Fit the first model with random intercept and slopes for week and week16 using nlme
model1_actg_nlme <- lme(logcd4 ~ week + week16 + trt.week + trt.week16, 
                        random = ~ week + week16 | id, data = cd4, method = "REML")

# Display the summary of the model
summary(model1_actg_nlme)
```

#### Model 2: Including Additional Predictors (Age and Sex)

```{r actg-model2-nlme, echo=TRUE}
# Fit the second model including age and sex using nlme
model2_actg_nlme <- lme(logcd4 ~ age + sex + week + week16 + trt.week + trt.week16, 
                        random = ~ week + week16 | id, data = cd4, method = "REML")

# Display the summary of the model
summary(model2_actg_nlme)
```

### Step 4: Fit Linear Mixed-Effects Models Using `lme4`

#### Model 1: Random Intercept and Slopes for Week and Week16

```{r actg-model1-lme4, echo=TRUE}
# Fit the first model with random intercept and slopes for week and week16 using lme4
model1_actg_lme4 <- lmer(logcd4 ~ week + week16 + trt.week + trt.week16 + 
                          (week + week16 | id), data = cd4, REML = TRUE)

# Display the summary of the model
summary(model1_actg_lme4)
```

#### Model 2: Including Additional Predictors (Age and Sex)

```{r actg-model2-lme4, echo=TRUE}
# Fit the second model including age and sex using lme4
model2_actg_lme4 <- lmer(logcd4 ~ age + sex + week + week16 + trt.week + trt.week16 + 
                          (week + week16 | id), data = cd4, REML = TRUE)

# Display the summary of the model
summary(model2_actg_lme4)
```

### Step 5: Compare Models Using AIC and BIC

```{r actg-model-comparison, echo=TRUE}
# Extract AIC and BIC for nlme models
aic_nlme_actg <- AIC(model1_actg_nlme, model2_actg_nlme)
bic_nlme_actg <- BIC(model1_actg_nlme, model2_actg_nlme)

# Extract AIC and BIC for lme4 models
aic_lme4_actg <- AIC(model1_actg_lme4, model2_actg_lme4)
bic_lme4_actg <- BIC(model1_actg_lme4, model2_actg_lme4)

# Combine into a single table
model_comparison_actg <- data.frame(
  Model = rep(c("Model1_nlme", "Model2_nlme", "Model1_lme4", "Model2_lme4"), each = 1),
  AIC = c(aic_nlme_actg$AIC[1], aic_nlme_actg$AIC[2], aic_lme4_actg$AIC[1], aic_lme4_actg$AIC[2]),
  BIC = c(bic_nlme_actg$BIC[1], bic_nlme_actg$BIC[2], bic_lme4_actg$BIC[1], bic_lme4_actg$BIC[2]))
)

# Display the comparison table
print(model_comparison_actg)
```

### Interpretation of Model Comparisons

**Model 2** (`Including Age and Sex`) generally shows a better fit with lower AIC and BIC values compared to **Model 1**, indicating that adding these predictors improves the model's explanatory power.

### Step 6: Residual Diagnostics Using `DHARMa`

#### Diagnostics for Model 2 (nlme)

```{r actg-residuals-model2-nlme, echo=TRUE, warning=FALSE, message=FALSE}
# Simulate residuals using DHARMa for nlme model2
simulation_output_actg_nlme <- simulateResiduals(fittedModel = model2_actg_nlme, n = 1000)

# Plot residual diagnostics
plot(simulation_output_actg_nlme)
```

#### Diagnostics for Model 2 (lme4)

```{r actg-residuals-model2-lme4, echo=TRUE, warning=FALSE, message=FALSE}
# Simulate residuals using DHARMa for lme4 model2
simulation_output_actg_lme4 <- simulateResiduals(fittedModel = model2_actg_lme4, n = 1000)

# Plot residual diagnostics
plot(simulation_output_actg_lme4)
```

### Interpretation of Residual Diagnostics

The residual diagnostic plots generated by `DHARMa` help assess the fit of the models:

1. **Uniformity**: Residuals should be uniformly distributed if the model fits well.
2. **No Patterns**: There should be no discernible patterns in residuals vs. predicted values.
3. **No Overdispersion or Zero-Inflation**: The residuals should not show signs of overdispersion or excess zeros.

If the diagnostic plots show deviations from these expectations, it may indicate issues with the model fit, such as missing variables, incorrect random effects structure, or violations of model assumptions.

### Step 7: Generate Predicted Means and Empirical BLUPs

#### Predicted Means

We generate predicted means from `model2_actg_lme4` to understand the fitted values across observations.

```{r actg-predict, echo=TRUE}
# Generate predicted values from lme4 model
predicted_means_actg <- predict(model2_actg_lme4)

# Display the first few predicted values
head(predicted_means_actg)
```

#### Empirical BLUPs

Empirical Best Linear Unbiased Predictors (BLUPs) provide estimates of the random effects for each subject.

```{r actg-blups, echo=TRUE}
# Extract random effects (BLUPs) from lme4 model
random_effects_actg <- ranef(model2_actg_lme4)$id

# Display the first few BLUPs
head(random_effects_actg)
```

### Interpretation of Results

1. **Fixed Effects**: The fixed effects represent the average relationship between the predictors (`age`, `sex`, `week`, `week16`, `trt.week`, `trt.week16`) and the outcome (`logcd4`) across all subjects.
   - **Positive coefficients** indicate a positive association with `logcd4`.
   - **Negative coefficients** indicate a negative association with `logcd4`.
   - Statistical significance (p-values) indicates whether the effect is reliably different from zero.

2. **Random Effects**: The random effects allow each subject to have their own intercept and slopes for `week` and `week16`, capturing individual variability.
   - **Random Intercept**: Differences in baseline `logcd4` levels across subjects.
   - **Random Slopes**: Differences in the effect of `week` and `week16` on `logcd4` across subjects.

3. **Model Fit**: Lower AIC and BIC values suggest a better-fitting model. Comparing these across models helps in selecting the most appropriate model.
4. **Residual Diagnostics**: Ensure that the model assumptions are met, such as homoscedasticity and normality of residuals.
5. **Practical Implications**: Understanding both fixed and random effects aids in identifying overall trends and individual-specific responses, which is crucial for personalized treatment approaches in clinical studies.

---

# Conclusion

In this chapter, we explored the application of linear mixed-effects models with random intercepts and slopes across three different longitudinal studies. These models allow us to account for individual variability in both baseline measurements and rates of change over time, providing a more nuanced understanding of the data.

## Key Takeaways

1. **Random Intercepts and Slopes**: Allow each subject to have their own baseline and rate of change, capturing individual differences.
2. **Model Comparison**: Using criteria like AIC and BIC helps in selecting the best-fitting model.
3. **Residual Diagnostics**: Essential for validating model assumptions and ensuring reliable inferences.
4. **Predicted Means and BLUPs**: Provide insights into the fitted values and individual-specific random effects, respectively.

## Practice Questions

1. **Model Simplification**: How does the interpretation of the model change if only random intercepts are included without random slopes?
2. **Model Selection**: Based on AIC and BIC values, which model provides the best fit for the Six Cities Study data?
3. **Random Effects Interpretation**: What do the random intercepts and slopes tell us about individual variability in the ACTG 193A Study?
4. **Residual Analysis**: What steps would you take if the residual diagnostics indicate a poor model fit?

---

# References

- Pinheiro, J., Bates, D., DebRoy, S., Sarkar, D., & R Core Team. (2021). *nlme: Linear and Nonlinear Mixed Effects Models*. R package version 3.1-152. <https://CRAN.R-project.org/package=nlme>
- Bates, D., Mächler, M., Bolker, B., & Walker, S. (2015). Fitting Linear Mixed-Effects Models Using `lme4`. *Journal of Statistical Software*, 67(1), 1–48. <https://doi.org/10.18637/jss.v067.i01>
- Kuznetsova, A., Brockhoff, P. B., & Christensen, R. H. B. (2017). *lmerTest: Tests in Linear Mixed Effects Models*. R package version 3.1-3. <https://CRAN.R-project.org/package=lmerTest>
- Quarto Project. (2023). *Quarto: A Next-Generation Version of R Markdown*. <https://quarto.org>
- Hothorn, T., Bretz, F., & Westfall, P. (2008). *Simultaneous Inference in General Parametric Models*. Springer Science & Business Media.

```